"""autogenerated by genpy from nahchoina/BumpDataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BumpDataRequest(genpy.Message):
  _md5sum = "fc7d7625eba029decfc682ca25a48ba2"
  _type = "nahchoina/BumpDataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 bumpers
uint8 cliff
uint8 state

"""
  __slots__ = ['bumpers','cliff','state']
  _slot_types = ['uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bumpers,cliff,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BumpDataRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bumpers is None:
        self.bumpers = 0
      if self.cliff is None:
        self.cliff = 0
      if self.state is None:
        self.state = 0
    else:
      self.bumpers = 0
      self.cliff = 0
      self.state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.bumpers, _x.cliff, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bumpers, _x.cliff, _x.state,) = _struct_3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.bumpers, _x.cliff, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bumpers, _x.cliff, _x.state,) = _struct_3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
"""autogenerated by genpy from nahchoina/BumpDataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BumpDataResponse(genpy.Message):
  _md5sum = "034fd352dfc0cd1bd98316f16aa998bf"
  _type = "nahchoina/BumpDataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool bumper_left
bool bumper_mid
bool bumper_right


"""
  __slots__ = ['bumper_left','bumper_mid','bumper_right']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bumper_left,bumper_mid,bumper_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BumpDataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bumper_left is None:
        self.bumper_left = False
      if self.bumper_mid is None:
        self.bumper_mid = False
      if self.bumper_right is None:
        self.bumper_right = False
    else:
      self.bumper_left = False
      self.bumper_mid = False
      self.bumper_right = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.bumper_left, _x.bumper_mid, _x.bumper_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bumper_left, _x.bumper_mid, _x.bumper_right,) = _struct_3B.unpack(str[start:end])
      self.bumper_left = bool(self.bumper_left)
      self.bumper_mid = bool(self.bumper_mid)
      self.bumper_right = bool(self.bumper_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.bumper_left, _x.bumper_mid, _x.bumper_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bumper_left, _x.bumper_mid, _x.bumper_right,) = _struct_3B.unpack(str[start:end])
      self.bumper_left = bool(self.bumper_left)
      self.bumper_mid = bool(self.bumper_mid)
      self.bumper_right = bool(self.bumper_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
class BumpData(object):
  _type          = 'nahchoina/BumpData'
  _md5sum = '7e42fd26a3c414dea20231fe4e1c87e2'
  _request_class  = BumpDataRequest
  _response_class = BumpDataResponse
