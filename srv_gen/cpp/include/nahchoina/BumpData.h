/* Auto-generated by genmsg_cpp for file /home/turtlebot/jackhachoi-workspace/sandbox/nahchoina/srv/BumpData.srv */
#ifndef NAHCHOINA_SERVICE_BUMPDATA_H
#define NAHCHOINA_SERVICE_BUMPDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace nahchoina
{
template <class ContainerAllocator>
struct BumpDataRequest_ {
  typedef BumpDataRequest_<ContainerAllocator> Type;

  BumpDataRequest_()
  : bumpers(0)
  , cliff(0)
  , state(0)
  {
  }

  BumpDataRequest_(const ContainerAllocator& _alloc)
  : bumpers(0)
  , cliff(0)
  , state(0)
  {
  }

  typedef uint8_t _bumpers_type;
  uint8_t bumpers;

  typedef uint8_t _cliff_type;
  uint8_t cliff;

  typedef uint8_t _state_type;
  uint8_t state;


  typedef boost::shared_ptr< ::nahchoina::BumpDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nahchoina::BumpDataRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BumpDataRequest
typedef  ::nahchoina::BumpDataRequest_<std::allocator<void> > BumpDataRequest;

typedef boost::shared_ptr< ::nahchoina::BumpDataRequest> BumpDataRequestPtr;
typedef boost::shared_ptr< ::nahchoina::BumpDataRequest const> BumpDataRequestConstPtr;



template <class ContainerAllocator>
struct BumpDataResponse_ {
  typedef BumpDataResponse_<ContainerAllocator> Type;

  BumpDataResponse_()
  : bumper_left(false)
  , bumper_mid(false)
  , bumper_right(false)
  {
  }

  BumpDataResponse_(const ContainerAllocator& _alloc)
  : bumper_left(false)
  , bumper_mid(false)
  , bumper_right(false)
  {
  }

  typedef uint8_t _bumper_left_type;
  uint8_t bumper_left;

  typedef uint8_t _bumper_mid_type;
  uint8_t bumper_mid;

  typedef uint8_t _bumper_right_type;
  uint8_t bumper_right;


  typedef boost::shared_ptr< ::nahchoina::BumpDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nahchoina::BumpDataResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BumpDataResponse
typedef  ::nahchoina::BumpDataResponse_<std::allocator<void> > BumpDataResponse;

typedef boost::shared_ptr< ::nahchoina::BumpDataResponse> BumpDataResponsePtr;
typedef boost::shared_ptr< ::nahchoina::BumpDataResponse const> BumpDataResponseConstPtr;


struct BumpData
{

typedef BumpDataRequest Request;
typedef BumpDataResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BumpData
} // namespace nahchoina

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nahchoina::BumpDataRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nahchoina::BumpDataRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nahchoina::BumpDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc7d7625eba029decfc682ca25a48ba2";
  }

  static const char* value(const  ::nahchoina::BumpDataRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfc7d7625eba029deULL;
  static const uint64_t static_value2 = 0xcfc682ca25a48ba2ULL;
};

template<class ContainerAllocator>
struct DataType< ::nahchoina::BumpDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/BumpDataRequest";
  }

  static const char* value(const  ::nahchoina::BumpDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nahchoina::BumpDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 bumpers\n\
uint8 cliff\n\
uint8 state\n\
\n\
";
  }

  static const char* value(const  ::nahchoina::BumpDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nahchoina::BumpDataRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nahchoina::BumpDataResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nahchoina::BumpDataResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nahchoina::BumpDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034fd352dfc0cd1bd98316f16aa998bf";
  }

  static const char* value(const  ::nahchoina::BumpDataResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034fd352dfc0cd1bULL;
  static const uint64_t static_value2 = 0xd98316f16aa998bfULL;
};

template<class ContainerAllocator>
struct DataType< ::nahchoina::BumpDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/BumpDataResponse";
  }

  static const char* value(const  ::nahchoina::BumpDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nahchoina::BumpDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool bumper_left\n\
bool bumper_mid\n\
bool bumper_right\n\
\n\
\n\
";
  }

  static const char* value(const  ::nahchoina::BumpDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nahchoina::BumpDataResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nahchoina::BumpDataRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bumpers);
    stream.next(m.cliff);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BumpDataRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nahchoina::BumpDataResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bumper_left);
    stream.next(m.bumper_mid);
    stream.next(m.bumper_right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BumpDataResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nahchoina::BumpData> {
  static const char* value() 
  {
    return "7e42fd26a3c414dea20231fe4e1c87e2";
  }

  static const char* value(const nahchoina::BumpData&) { return value(); } 
};

template<>
struct DataType<nahchoina::BumpData> {
  static const char* value() 
  {
    return "nahchoina/BumpData";
  }

  static const char* value(const nahchoina::BumpData&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nahchoina::BumpDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7e42fd26a3c414dea20231fe4e1c87e2";
  }

  static const char* value(const nahchoina::BumpDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nahchoina::BumpDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/BumpData";
  }

  static const char* value(const nahchoina::BumpDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nahchoina::BumpDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7e42fd26a3c414dea20231fe4e1c87e2";
  }

  static const char* value(const nahchoina::BumpDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nahchoina::BumpDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/BumpData";
  }

  static const char* value(const nahchoina::BumpDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAHCHOINA_SERVICE_BUMPDATA_H

