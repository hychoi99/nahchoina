/* Auto-generated by genmsg_cpp for file /home/turtlebot/jackhachoi-workspace/sandbox/nahchoina/srv/CliffData.srv */
#ifndef NAHCHOINA_SERVICE_CLIFFDATA_H
#define NAHCHOINA_SERVICE_CLIFFDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace nahchoina
{
template <class ContainerAllocator>
struct CliffDataRequest_ {
  typedef CliffDataRequest_<ContainerAllocator> Type;

  CliffDataRequest_()
  : CliffState(0)
  {
  }

  CliffDataRequest_(const ContainerAllocator& _alloc)
  : CliffState(0)
  {
  }

  typedef uint8_t _CliffState_type;
  uint8_t CliffState;


  typedef boost::shared_ptr< ::nahchoina::CliffDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nahchoina::CliffDataRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CliffDataRequest
typedef  ::nahchoina::CliffDataRequest_<std::allocator<void> > CliffDataRequest;

typedef boost::shared_ptr< ::nahchoina::CliffDataRequest> CliffDataRequestPtr;
typedef boost::shared_ptr< ::nahchoina::CliffDataRequest const> CliffDataRequestConstPtr;



template <class ContainerAllocator>
struct CliffDataResponse_ {
  typedef CliffDataResponse_<ContainerAllocator> Type;

  CliffDataResponse_()
  : result(false)
  {
  }

  CliffDataResponse_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::nahchoina::CliffDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nahchoina::CliffDataResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CliffDataResponse
typedef  ::nahchoina::CliffDataResponse_<std::allocator<void> > CliffDataResponse;

typedef boost::shared_ptr< ::nahchoina::CliffDataResponse> CliffDataResponsePtr;
typedef boost::shared_ptr< ::nahchoina::CliffDataResponse const> CliffDataResponseConstPtr;


struct CliffData
{

typedef CliffDataRequest Request;
typedef CliffDataResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CliffData
} // namespace nahchoina

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nahchoina::CliffDataRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nahchoina::CliffDataRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nahchoina::CliffDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81374356b3c6df0f65f03e6cc950daef";
  }

  static const char* value(const  ::nahchoina::CliffDataRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x81374356b3c6df0fULL;
  static const uint64_t static_value2 = 0x65f03e6cc950daefULL;
};

template<class ContainerAllocator>
struct DataType< ::nahchoina::CliffDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/CliffDataRequest";
  }

  static const char* value(const  ::nahchoina::CliffDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nahchoina::CliffDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 CliffState\n\
\n\
";
  }

  static const char* value(const  ::nahchoina::CliffDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nahchoina::CliffDataRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nahchoina::CliffDataResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nahchoina::CliffDataResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nahchoina::CliffDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::nahchoina::CliffDataResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::nahchoina::CliffDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/CliffDataResponse";
  }

  static const char* value(const  ::nahchoina::CliffDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nahchoina::CliffDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
";
  }

  static const char* value(const  ::nahchoina::CliffDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nahchoina::CliffDataResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nahchoina::CliffDataRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.CliffState);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CliffDataRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nahchoina::CliffDataResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CliffDataResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nahchoina::CliffData> {
  static const char* value() 
  {
    return "84b1231b3f295dc64c73346c9744e043";
  }

  static const char* value(const nahchoina::CliffData&) { return value(); } 
};

template<>
struct DataType<nahchoina::CliffData> {
  static const char* value() 
  {
    return "nahchoina/CliffData";
  }

  static const char* value(const nahchoina::CliffData&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nahchoina::CliffDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84b1231b3f295dc64c73346c9744e043";
  }

  static const char* value(const nahchoina::CliffDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nahchoina::CliffDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/CliffData";
  }

  static const char* value(const nahchoina::CliffDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nahchoina::CliffDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84b1231b3f295dc64c73346c9744e043";
  }

  static const char* value(const nahchoina::CliffDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nahchoina::CliffDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nahchoina/CliffData";
  }

  static const char* value(const nahchoina::CliffDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAHCHOINA_SERVICE_CLIFFDATA_H

